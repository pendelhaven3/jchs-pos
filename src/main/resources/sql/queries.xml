<?xml version="1.0" encoding="UTF-8"?>
<root>
	<entry name="customerSalesSummaryReport">
	<![CDATA[
select cust.CODE as CUSTOMER_CODE, cust.NAME as CUSTOMER_NAME, 
	sum(TOTAL_NET_AMOUNT) as TOTAL_NET_AMOUNT,
	sum(TOTAL_COST) as TOTAL_COST,
	sum(TOTAL_PROFIT) as TOTAL_PROFIT
from (
	select CUSTOMER_ID, sum(NET_AMOUNT) as TOTAL_NET_AMOUNT, sum(TOTAL_COST) as TOTAL_COST, sum(NET_AMOUNT) - sum(TOTAL_COST) as TOTAL_PROFIT
	from (
		select a.CUSTOMER_ID,
		b.UNIT_PRICE * b.QUANTITY * (1 - DISCOUNT_1/100) * (1 - DISCOUNT_2/100) * (1 - DISCOUNT_3/100) - FLAT_RATE_DISCOUNT as NET_AMOUNT,
		b.COST * b.QUANTITY as TOTAL_COST
		from SALES_INVOICE a
		join SALES_INVOICE_ITEM b
		  on b.SALES_INVOICE_ID = a.ID
		where a.MARK_IND = 'Y'
        and a.TRANSACTION_DT >= :fromDate
        and a.TRANSACTION_DT <= :toDate
	) agg
	group by CUSTOMER_ID
	union all
	select CUSTOMER_ID, 
		-1 * sum(NET_AMOUNT) as TOTAL_NET_AMOUNT,
		-1 * sum(TOTAL_COST) as TOTAL_COST, 
		-1 * (sum(NET_AMOUNT) - sum(TOTAL_COST)) as TOTAL_PROFIT
	from (
		select d.CUSTOMER_ID,
		c.UNIT_PRICE * b.QUANTITY * (1 - DISCOUNT_1/100) * (1 - DISCOUNT_2/100) * (1 - DISCOUNT_3/100) - (FLAT_RATE_DISCOUNT / c.QUANTITY * b.QUANTITY) as NET_AMOUNT,
		c.COST * b.QUANTITY as TOTAL_COST
		from SALES_RETURN a
		join SALES_RETURN_ITEM b
		  on b.SALES_RETURN_ID = a.ID
		join SALES_INVOICE_ITEM c
		  on c.ID = b.SALES_INVOICE_ITEM_ID
		join SALES_INVOICE d
		  on d.ID = a.SALES_INVOICE_ID
		where a.POST_IND = 'Y'
		and a.CANCEL_IND = 'N'
        and a.POST_DT >= :fromDate
        and a.POST_DT < date_add(:toDate, interval 1 day)
	) agg
	group by CUSTOMER_ID
	union all
	select CUSTOMER_ID, 
	-1 * sum(NET_AMOUNT) as TOTAL_NET_AMOUNT, 
	-1 * sum(TOTAL_COST) as TOTAL_COST, 
	-1 * (sum(NET_AMOUNT) - sum(TOTAL_COST)) as TOTAL_PROFIT
	from (
		select a.CUSTOMER_ID,
		b.UNIT_PRICE * b.QUANTITY as NET_AMOUNT,
		b.COST * b.QUANTITY as TOTAL_COST
		from BAD_STOCK_RETURN a
		join BAD_STOCK_RETURN_ITEM b
		  on b.BAD_STOCK_RETURN_ID = a.ID
		where a.POST_IND = 'Y'
		and a.CANCEL_IND = 'N'
        and a.POST_DT >= :fromDate
        and a.POST_DT <= :toDate
	) agg
	group by CUSTOMER_ID
	union all
	select CUSTOMER_ID, 
		-1 * sum(NET_AMOUNT) as TOTAL_NET_AMOUNT,
		-1 * sum(TOTAL_COST) as TOTAL_COST, 
		-1 * (sum(NET_AMOUNT) - sum(TOTAL_COST)) as TOTAL_PROFIT
	from (
		select d.CUSTOMER_ID,
		c.UNIT_PRICE * b.QUANTITY * (1 - DISCOUNT_1/100) * (1 - DISCOUNT_2/100) * (1 - DISCOUNT_3/100) - (FLAT_RATE_DISCOUNT / c.QUANTITY * b.QUANTITY) as NET_AMOUNT,
		c.COST * b.QUANTITY as TOTAL_COST
		from NO_MORE_STOCK_ADJUSTMENT a
		join NO_MORE_STOCK_ADJUSTMENT_ITEM b
		  on b.NO_MORE_STOCK_ADJUSTMENT_ID = a.ID
		join SALES_INVOICE_ITEM c
		  on c.ID = b.SALES_INVOICE_ITEM_ID
		join SALES_INVOICE d
		  on d.ID = a.SALES_INVOICE_ID
		where a.POST_IND = 'Y'
        and a.POST_DT >= :fromDate
        and a.POST_DT < date_add(:toDate, interval 1 day)
	) agg
	group by CUSTOMER_ID
) main
join CUSTOMER cust
  on cust.ID = main.CUSTOMER_ID
group by CUSTOMER_ID
order by cust.NAME
	]]>
	</entry>
	<entry name="salesByManufacturerReport">
	<![CDATA[
select m.NAME as MANUFACTURER_NAME, sum(AMOUNT) as TOTAL_AMOUNT
from (
	select MANUFACTURER_ID, sum(NET_AMOUNT) as AMOUNT
	from (
		select c.MANUFACTURER_ID,
		b.UNIT_PRICE * b.QUANTITY * (1 - DISCOUNT_1/100) * (1 - DISCOUNT_2/100) * (1 - DISCOUNT_3/100) - FLAT_RATE_DISCOUNT as NET_AMOUNT
		from SALES_INVOICE a
		join SALES_INVOICE_ITEM b
		  on b.SALES_INVOICE_ID = a.ID
		join PRODUCT c
		  on c.ID = b.PRODUCT_ID
		where a.MARK_IND = 'Y'
		and (a.CUSTOMER_ID = :customer or '' = :customer)
        and a.TRANSACTION_DT >= :fromDate
        and a.TRANSACTION_DT <= :toDate
	) agg
	group by MANUFACTURER_ID
    union all
	select MANUFACTURER_ID, -1 * sum(NET_AMOUNT) as AMOUNT
	from (
		select e.MANUFACTURER_ID,
		c.UNIT_PRICE * b.QUANTITY * (1 - DISCOUNT_1/100) * (1 - DISCOUNT_2/100) * (1 - DISCOUNT_3/100) - (FLAT_RATE_DISCOUNT / c.QUANTITY * b.QUANTITY) as NET_AMOUNT
		from SALES_RETURN a
		join SALES_RETURN_ITEM b
		  on b.SALES_RETURN_ID = a.ID
		join SALES_INVOICE_ITEM c
		  on c.ID = b.SALES_INVOICE_ITEM_ID
		join SALES_INVOICE d
		  on d.ID = a.SALES_INVOICE_ID
		join PRODUCT e
		  on e.ID = c.PRODUCT_ID
		where a.POST_IND = 'Y'
		and a.CANCEL_IND = 'N'
		and (d.CUSTOMER_ID = :customer or '' = :customer)
        and a.POST_DT >= :fromDate
        and a.POST_DT < date_add(:toDate, interval 1 day)
	) agg
	group by MANUFACTURER_ID
) main
join MANUFACTURER m
  on m.ID = main.MANUFACTURER_ID
group by MANUFACTURER_ID
order by m.NAME
	]]>
	</entry>
	<entry name="stockCardInventoryReport">
	<![CDATA[
select POST_DT, TRANSACTION_NO, CUSTOMER_SUPPLIER_NAME, TRANSACTION_TYPE, TRANSACTION_TYPE_KEY,
UNIT, QUANTITY, UNIT_COST_OR_PRICE, REFERENCE_NO
from (
	select a.SALE_DT as POST_DT, a.SALE_NO as TRANSACTION_NO, null as CUSTOMER_SUPPLIER_NAME,
		'SALES' as TRANSACTION_TYPE, 'SALES' as TRANSACTION_TYPE_KEY, c.UOM_CODE as UNIT, b.QUANTITY,
		b.SELL_PRICE as UNIT_COST_OR_PRICE, null as REFERENCE_NO
	from TRISYS_SALES a
	join TRISYS_SALES_ITEM b
		on b.TRISYS_SALES_ID = a.ID
	join PRODUCT c
		on c.CODE = b.PRODUCT_CODE
	where c.CODE = :product_code
	union all
	select a.POST_DT, a.RECEIVING_RECEIPT_NO as TRANSACTION_NO,
		c.NAME as CUSTOMER_SUPPLIER_NAME,
		'RECEIVING RECEIPT' as TRANSACTION_TYPE, 'RECEIVING RECEIPT' as TRANSACTION_TYPE_KEY, b.UNIT, b.QUANTITY,
		b.COST as UNIT_COST_OR_PRICE, a.REFERENCE_NO
	from RECEIVING_RECEIPT a
	join RECEIVING_RECEIPT_ITEM b
		on b.RECEIVING_RECEIPT_ID = a.ID
	join SUPPLIER c
		on c.ID = a.SUPPLIER_ID
	join PRODUCT d
		on d.PRODUCT2_ID = b.PRODUCT_ID
        and d.UOM_CODE = b.UNIT
	where d.CODE = :product_code
	and a.POST_IND = 'Y'
	union all
	select a.POST_DT, a.ADJUSTMENT_OUT_NO as TRANSACTION_NO,
		null as CUSTOMER_SUPPLIER_NAME,
		'ADJUSTMENT OUT' as TRANSACTION_TYPE, 'ADJUSTMENT OUT' as TRANSACTION_TYPE_KEY, b.UNIT, b.QUANTITY,
		null as UNIT_COST_OR_PRICE, a.REMARKS as REFERENCE_NO
	from ADJUSTMENT_OUT a
	join ADJUSTMENT_OUT_ITEM b
		on b.ADJUSTMENT_OUT_ID = a.ID
	join PRODUCT c
		on c.PRODUCT2_ID = b.PRODUCT_ID
        and c.UOM_CODE = b.UNIT
	where c.CODE = :product_code
	and a.POST_IND = 'Y'
	union all
	select a.POST_DT, a.ADJUSTMENT_IN_NO as TRANSACTION_NO,
		null as CUSTOMER_SUPPLIER_NAME,
		'ADJUSTMENT IN' as TRANSACTION_TYPE, 'ADJUSTMENT IN' as TRANSACTION_TYPE_KEY, b.UNIT, b.QUANTITY,
		null as UNIT_COST_OR_PRICE, a.REMARKS as REFERENCE_NO
	from ADJUSTMENT_IN a
	join ADJUSTMENT_IN_ITEM b
		on b.ADJUSTMENT_IN_ID = a.ID
	join PRODUCT c
		on c.PRODUCT2_ID = b.PRODUCT_ID
        and c.UOM_CODE = b.UNIT
	where c.CODE = :product_code
	and a.POST_IND = 'Y'
	union all
	select b.POST_DT, null as TRANSACTION_NO,
		null as CUSTOMER_SUPPLIER_NAME,
		'INVENTORY CHECK' as TRANSACTION_TYPE, 'INVENTORY CHECK' as TRANSACTION_TYPE_KEY, a.UNIT, a.ACTUAL_COUNT,
		null as UNIT_COST_OR_PRICE, null as REFERENCE_NO
	from INVENTORY_CHECK_SUMMARY_ITEM a
	join INVENTORY_CHECK b
		on b.ID = a.INVENTORY_CHECK_ID
	join PRODUCT c
		on c.PRODUCT2_ID = a.PRODUCT_ID
        and c.UOM_CODE = a.UNIT
	where c.CODE = :product_code
	and b.POST_IND = 'Y'
    and a.ACTUAL_COUNT <> 0
	union all
	select a.POST_DT, a.PURCHASE_RETURN_NO as TRANSACTION_NO,
		e.NAME as CUSTOMER_SUPPLIER_NAME,
		'PURCHASE RETURN' as TRANSACTION_TYPE, 'PURCHASE RETURN' as TRANSACTION_TYPE_KEY, c.UNIT, b.QUANTITY,
		null as UNIT_COST_OR_PRICE, null as REFERENCE_NO
	from PURCHASE_RETURN a
	join PURCHASE_RETURN_ITEM b
		on b.PURCHASE_RETURN_ID = a.ID
	join RECEIVING_RECEIPT_ITEM c
		on c.ID = b.RECEIVING_RECEIPT_ITEM_ID
	join RECEIVING_RECEIPT d
		on d.ID = a.RECEIVING_RECEIPT_ID
	join SUPPLIER e
		on e.ID = d.SUPPLIER_ID
	join PRODUCT f
		on f.PRODUCT2_ID = c.PRODUCT_ID
        and f.UOM_CODE = c.UNIT
	where f.CODE = :product_code
	and a.POST_IND = 'Y'
) m
    ]]>
	</entry>
	<entry name="stockOfftakeReport">
	<![CDATA[
select b.CODE, b.DESCRIPTION, a.UNIT, a.QUANTITY
from (
	select a.PRODUCT_ID, a.UNIT, sum(a.QUANTITY) as QUANTITY
	from (
		select c.ID as PRODUCT_ID, b.UNIT, b.QUANTITY
		from SALES_INVOICE a
		join SALES_INVOICE_ITEM b
		  on b.SALES_INVOICE_ID = a.ID
		join PRODUCT c
		  on c.ID = b.PRODUCT_ID
		join MANUFACTURER d
		  on d.ID = c.MANUFACTURER_ID
		where d.ID = :manufacturer
		and a.TRANSACTION_DT between :fromDate and :toDate
		and b.UNIT = if(c.UNIT_IND_CSE = 'Y', 'CSE', if(c.UNIT_IND_TIE = 'Y', 'TIE', if(c.UNIT_IND_CTN = 'Y', 'CTN', if(c.UNIT_IND_DOZ = 'Y', 'DOZ', 'PCS'))))
		and a.MARK_IND = 'Y'
		union all
		select c.ID as PRODUCT_ID, b.FROM_UNIT as UNIT, b.QUANTITY
		from STOCK_QTY_CONVERSION a
		join STOCK_QTY_CONVERSION_ITEM b
		  on b.STOCK_QTY_CONVERSION_ID = a.ID
		join PRODUCT c
		  on c.ID = b.PRODUCT_ID
		join MANUFACTURER d
		  on d.ID = c.MANUFACTURER_ID
		where d.ID = :manufacturer
		and a.POST_DT between :fromDate and :toDate
		and b.FROM_UNIT = if(c.UNIT_IND_CSE = 'Y', 'CSE', if(c.UNIT_IND_TIE = 'Y', 'TIE', if(c.UNIT_IND_CTN = 'Y', 'CTN', if(c.UNIT_IND_DOZ = 'Y', 'DOZ', 'PCS'))))
		union all
		select d.ID as PRODUCT_ID, c.UNIT, -b.QUANTITY
		from SALES_RETURN a
		join SALES_RETURN_ITEM b
		  on b.SALES_RETURN_ID = a.ID
		join SALES_INVOICE_ITEM c
		  on c.ID = b.SALES_INVOICE_ITEM_ID
		join PRODUCT d
		  on d.ID = c.PRODUCT_ID
		join MANUFACTURER e
		  on e.ID = d.MANUFACTURER_ID
		where e.ID = :manufacturer
		and a.POST_DT between :fromDate and :toDate
		and c.UNIT = if(d.UNIT_IND_CSE = 'Y', 'CSE', if(d.UNIT_IND_TIE = 'Y', 'TIE', if(d.UNIT_IND_CTN = 'Y', 'CTN', if(d.UNIT_IND_DOZ = 'Y', 'DOZ', 'PCS'))))
	) a
	group by a.PRODUCT_ID, a.UNIT
) a
join PRODUCT b
  on b.ID = a.PRODUCT_ID
order by b.CODE
	]]>
	</entry>
	<entry name="inventoryCheckStockCardInventoryReportItem">
	<![CDATA[
select b.POST_DT, null as TRANSACTION_NO,
	null as CUSTOMER_SUPPLIER_NAME,
	'INVENTORY CHECK' as TRANSACTION_TYPE, 'INVENTORY CHECK AFTER' as TRANSACTION_TYPE_KEY, a.UNIT, a.ACTUAL_COUNT as QUANTITY,
	null as UNIT_COST_OR_PRICE, null as REFERENCE_NO
from INVENTORY_CHECK_SUMMARY_ITEM a
join INVENTORY_CHECK b
	on b.ID = a.INVENTORY_CHECK_ID
where a.PRODUCT_ID = :product
and b.ID = :inventoryCheck
	]]>
	</entry>
	<entry name="pilferageReportItems">
<![CDATA[
select POST_DT, TRANSACTION_TYPE, TRANSACTION_NO, PRODUCT_ID, CODE, DESCRIPTION, UNIT, QUANTITY, COST
from (
	select a.POST_DT, 'ADJ IN' as TRANSACTION_TYPE, a.ADJUSTMENT_IN_NO as TRANSACTION_NO,
		c.ID as PRODUCT_ID, c.CODE, c.DESCRIPTION, b.UNIT, b.QUANTITY, b.COST
	from ADJUSTMENT_IN a
	join ADJUSTMENT_IN_ITEM b
		on b.ADJUSTMENT_IN_ID = a.ID
	join PRODUCT c
		on c.ID = b.PRODUCT_ID
	where a.POST_IND = 'Y'
	and a.PILFERAGE_IND = 'Y'
	union all
	select a.POST_DT, 'ADJ OUT' as TRANSACTION_TYPE, a.ADJUSTMENT_OUT_NO as TRANSACTION_NO,
		c.ID as PRODUCT_ID, c.CODE, c.DESCRIPTION, b.UNIT, b.QUANTITY, -b.UNIT_PRICE as COST
	from ADJUSTMENT_OUT a
	join ADJUSTMENT_OUT_ITEM b
		on b.ADJUSTMENT_OUT_ID = a.ID
	join PRODUCT c
		on c.ID = b.PRODUCT_ID
	where a.POST_IND = 'Y'
	and a.PILFERAGE_IND = 'Y'
	union all
	select a.POST_DT, 'NMS' as TRANSACTION_TYPE, a.NO_MORE_STOCK_ADJUSTMENT_NO as TRANSACTION_NO,
		d.ID as PRODUCT_ID, d.CODE, d.DESCRIPTION, c.UNIT, b.QUANTITY, -c.COST as COST
	from NO_MORE_STOCK_ADJUSTMENT a
	join NO_MORE_STOCK_ADJUSTMENT_ITEM b
		on b.NO_MORE_STOCK_ADJUSTMENT_ID = a.ID
	join SALES_INVOICE_ITEM c
		on c.ID = b.SALES_INVOICE_ITEM_ID
	join PRODUCT d
		on d.ID = c.PRODUCT_ID
	where a.POST_IND = 'Y'
	and a.PILFERAGE_IND = 'Y'
	union all
	select a.POST_DT, 'INV CHECK' as TRANSACTION_TYPE, null as TRANSACTION_NO,
		b.PRODUCT_ID, c.CODE, c.DESCRIPTION, b.UNIT, b.ACTUAL_COUNT - b.BEGINNING_INV as QUANTITY, b.COST
	from INVENTORY_CHECK a
	join INVENTORY_CHECK_SUMMARY_ITEM b
		on b.INVENTORY_CHECK_ID = a.ID
	join PRODUCT c
		on c.ID = b.PRODUCT_ID
	where b.ACTUAL_COUNT <> b.BEGINNING_INV
) a
where 1 = 1
	]]>
	</entry>
	<entry name="ewtReportItems">
<![CDATA[
select 
	PURCHASE_PAYMENT_ID, RECEIVING_RECEIPT_ID, RECEIVING_RECEIPT_NO, REFERENCE_NO, RECEIVED_DT, VAT_RATE, VAT_INCLUSIVE, PURCHASE_PAYMENT_NO, 
	(case RANK when 1 then BAD_STOCK_ADJ_TOTAL else 0 end) as BAD_STOCK_ADJ_TOTAL,
	CANCEL_ITEM_ADJ_TOTAL,
	RANK,
	@rank := 0,
	@paymentId := 0
from (
	select
		@rank := case when @paymentId <> a.ID then 1 else @rank + 1 end as RANK,
		@paymentId := cast((case when @paymentId is null then a.ID else (case when @paymentId <> a.ID then a.ID else @paymentId end) end) as unsigned) as PURCHASE_PAYMENT_ID,
		c.ID as RECEIVING_RECEIPT_ID,
		c.REFERENCE_NO,
		c.RECEIVING_RECEIPT_NO,
		c.RECEIVED_DT,
		c.VAT_RATE,
		c.VAT_INCLUSIVE,
		a.PURCHASE_PAYMENT_NO,
		(
			select ifnull(sum(AMOUNT), 0)
			from PURCHASE_PAYMENT_PAYMENT_ADJUSTMENT pppa
			join PURCHASE_PAYMENT_ADJ_TYPE ppat
				on ppat.ID = pppa.PURCHASE_PAYMENT_ADJ_TYPE_ID
			where ppat.CODE in ('RETURN - BS', 'DISC')
			and pppa.PURCHASE_PAYMENT_ID = a.ID
		) as BAD_STOCK_ADJ_TOTAL,
		(
			select ifnull(sum(AMOUNT), 0)
			from PURCHASE_PAYMENT_PAYMENT_ADJUSTMENT pppa
			join PURCHASE_PAYMENT_ADJ_TYPE ppat
				on ppat.ID = pppa.PURCHASE_PAYMENT_ADJ_TYPE_ID
			join PURCHASE_RETURN pr
				on pr.PURCHASE_RETURN_NO = pppa.REFERENCE_NO
			join RECEIVING_RECEIPT rr
				on rr.ID = pr.RECEIVING_RECEIPT_ID
			where ppat.CODE = 'RETURN - GS'
			and pppa.PURCHASE_PAYMENT_ID = a.ID
			and rr.ID = c.ID
		) as CANCEL_ITEM_ADJ_TOTAL
	from PURCHASE_PAYMENT a
	join PURCHASE_PAYMENT_RECEIVING_RECEIPT b
		on b.PURCHASE_PAYMENT_ID = a.ID
	join RECEIVING_RECEIPT c
		on c.ID = b.RECEIVING_RECEIPT_ID
	where a.SUPPLIER_ID = :supplierId
	and a.CANCEL_IND = 'N'
	and c.RECEIVED_DT >= :receivedDateFrom
	and c.RECEIVED_DT <= :receivedDateTo
	and c.CANCEL_IND = 'N'
	order by c.RECEIVED_DT
) x
	]]>
	</entry>
	<entry name="createBirForm2307ReportTable">
<![CDATA[
create table BIR_FORM_2307_REPORT (
  ID integer auto_increment,
  REPORT_NO integer not null,
  FROM_DT date not null,
  TO_DT date not null,
  SUPPLIER_ID integer not null,
  MONTH1_NET_AMT numeric(12, 2) null,
  MONTH2_NET_AMT numeric(12, 2) null,
  MONTH3_NET_AMT numeric(12, 2) null,
  CREATE_DT datetime not null,
  CREATED_BY integer null,
  primary key (ID),
  constraint BIR_FORM_2307_REPORT$FK foreign key (SUPPLIER_ID) references SUPPLIER (ID)
);
	]]>
	</entry>
</root>